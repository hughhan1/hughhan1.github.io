let fullColor, lighterColor;

const MESSAGE =
  "Scoring a loaf of bread is an essential step in the baking process, as it controls how the bread expands in the oven. When the dough is exposed " +
  "to high heat, the gases inside rapidly expand, causing the loaf to rise. Without scoring, the bread may burst unpredictably at its weakest " +
  "points, leading to an uneven shape and rough texture.  By making deliberate cuts on the surface, bakers guide this expansion, allowing the " +
  "dough to open up in a controlled way, resulting in a more uniform and aesthetically pleasing loaf.";

const TITLE = `The Secret to Making a Good
Loaf of Bread`;

const CIRCLE_DIAMETER = 1;

// Base canvas size for design reference
const BASE_WIDTH = 800;
const BASE_HEIGHT = 400;

// The LOAF letters were originally designed using these base coordinates.
const BASE_SHAPE_CENTER_X = 340;
const BASE_SHAPE_CENTER_Y = 185;

let scaleFactor = 1;
let offsetX, offsetY;

const INITIAL_SEARCH_RADIUS = 7;
const MAX_SEARCH_RADIUS = 128;
let currentMaxRadius = INITIAL_SEARCH_RADIUS;

let pg;
let isBaking = false;
let points = [];

let bakeButton, stopButton;
let bakeStartFrame = 0;

let mediumFont, regularFont;

// We'll also precompute an insideMask and a candidate list
let insideMask = [];
let insideCandidates = [];

// Preload runs before setup; it's the best place to load fonts
function preload() {
  mediumFont = loadFont(
    "/loaf/assets/fonts/ABCMonumentGroteskMono-Medium-Trial.otf"
  );
  regularFont = loadFont(
    "/loaf/assets/fonts/ABCMonumentGroteskMono-Regular-Trial.otf"
  );
}

const styleKeys = [
  "Style1",
  "Style2",
  "Style3",
  "Style4",
  "Style5",
  "Style6",
  "Style7",
  "Style8",
  "Style9",
];
let currentLoafStyle = "Style1";

// Define your loafStyles dictionary.
const loafStyles = {
  Style1: (g) => {
    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.875, 6.029999999999999);
    g.vertex(262.875, 6.029999999999999);
    g.bezierVertex(
      221.4525,
      6.029999999999999,
      187.875,
      39.6075,
      187.875,
      81.03
    );
    g.vertex(187.875, 193.52999999999997);
    g.bezierVertex(
      187.875,
      222.52499999999995,
      211.38,
      246.02999999999997,
      240.375,
      246.02999999999997
    );
    g.vertex(285.375, 246.02999999999997);
    g.bezierVertex(
      314.37,
      246.02999999999997,
      337.875,
      222.52499999999998,
      337.875,
      193.52999999999997
    );
    g.vertex(337.875, 81.03);
    g.bezierVertex(
      337.875,
      39.60750000000001,
      304.2975,
      6.030000000000005,
      262.875,
      6.030000000000005
    );
    g.beginContour();
    g.vertex(282.3075, 107.41499999999999);
    g.vertex(254.16, 172.0125);
    g.bezierVertex(
      254.0775,
      172.2,
      253.86,
      172.29,
      253.66499999999996,
      172.20749999999998
    );
    g.bezierVertex(
      253.47749999999996,
      172.12499999999997,
      253.3875,
      171.90749999999997,
      253.46999999999997,
      171.71249999999998
    );
    g.vertex(281.6175, 107.115);
    g.bezierVertex(
      281.70000000000005,
      106.9275,
      281.9175,
      106.83749999999999,
      282.1125,
      106.92
    );
    g.bezierVertex(
      282.3,
      107.00250000000001,
      282.39000000000004,
      107.22,
      282.3075,
      107.41499999999999
    );
    g.vertex(282.3075, 107.41499999999999);
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(63.9525, 186.98250000000002);
    g.bezierVertex(
      63.802499999999995,
      187.1325,
      63.052499999999995,
      186.465,
      62.90249999999999,
      186.315
    );
    g.vertex(62.90249999999999, 186.315);
    g.bezierVertex(
      62.75249999999999,
      186.16500000000002,
      62.75249999999999,
      185.9325,
      62.90249999999999,
      185.7825
    );
    g.vertex(122.64749999999998, 126.03750000000001);
    g.vertex(122.62499999999997, 126.03750000000001);
    g.vertex(133.98749999999998, 114.67500000000001);
    g.bezierVertex(
      145.92,
      102.7425,
      152.62499999999997,
      86.55000000000001,
      152.62499999999997,
      69.67500000000001
    );
    g.vertex(152.62499999999997, 69.67500000000001);
    g.bezierVertex(
      152.62499999999997,
      34.53,
      124.13249999999996,
      6.0375000000000085,
      88.98749999999998,
      6.0375000000000085
    );
    g.vertex(62.62499999999998, 6.0375000000000085);
    g.bezierVertex(
      29.48999999999998,
      6.0375000000000085,
      2.6249999999999787,
      32.90250000000001,
      2.6249999999999787,
      66.03750000000001
    );
    g.vertex(2.6249999999999787, 193.53750000000002);
    g.bezierVertex(
      2.6249999999999787,
      222.53250000000003,
      26.12999999999998,
      246.03750000000002,
      55.12499999999998,
      246.03750000000002
    );
    g.vertex(130.12499999999997, 246.03750000000002);
    g.bezierVertex(
      159.11999999999998,
      246.03750000000002,
      182.62499999999997,
      222.53250000000003,
      182.62499999999997,
      193.53750000000002
    );
    g.vertex(182.62499999999997, 186.03750000000002);
    g.bezierVertex(
      182.62499999999997,
      153.255,
      156.84749999999997,
      127.29750000000001,
      124.19999999999997,
      126.73500000000001
    );
    g.vertex(63.95249999999997, 186.98250000000002);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(708.375, 68.83500000000001);
    g.vertex(708.375, 68.83500000000001);
    g.bezierVertex(
      708.375,
      33.525000000000006,
      679.8149999999999,
      4.897500000000001,
      644.58,
      4.897500000000001
    );
    g.vertex(618.1500000000001, 4.897500000000001);
    g.bezierVertex(
      584.9325000000001,
      4.897500000000001,
      558.0,
      31.89,
      558.0,
      65.1825
    );
    g.vertex(558.0, 212.8725);
    g.bezierVertex(
      558.0,
      231.18,
      572.8125,
      246.02999999999997,
      591.0825,
      246.02999999999997
    );
    g.vertex(632.655, 246.02999999999997);
    g.bezierVertex(
      642.6225,
      246.02999999999997,
      652.185,
      242.06249999999994,
      659.235,
      234.9975
    );
    g.vertex(699.5625, 194.57999999999998);
    g.bezierVertex(
      705.2025,
      188.925,
      708.3675000000001,
      181.26,
      708.3675000000001,
      173.265
    );
    g.vertex(708.3675000000001, 155.60999999999999);
    g.bezierVertex(
      708.3675000000001,
      139.28249999999997,
      695.4075,
      125.99249999999998,
      679.2375,
      125.49
    );
    g.vertex(619.17, 185.5575);
    g.bezierVertex(
      619.02,
      185.70749999999998,
      618.7874999999999,
      185.70749999999998,
      618.6374999999999,
      185.5575
    );
    g.vertex(618.6374999999999, 185.5575);
    g.bezierVertex(
      618.4875,
      185.4075,
      618.4875,
      185.175,
      618.6374999999999,
      185.02499999999998
    );
    g.bezierVertex(
      618.6374999999999,
      185.02499999999998,
      680.0925,
      123.6,
      680.1599999999999,
      123.58499999999998
    );
    g.vertex(689.6775, 114.05249999999998);
    g.bezierVertex(
      701.64,
      102.05999999999997,
      708.3599999999999,
      85.79999999999997,
      708.3599999999999,
      68.84249999999997
    );
    g.vertex(708.3749999999999, 68.84249999999997);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(549.63, 169.4175);
    g.bezierVertex(
      546.1575,
      157.86749999999998,
      539.925,
      147.57,
      535.515,
      136.48499999999999
    );
    g.bezierVertex(
      532.755,
      129.54749999999999,
      529.53,
      122.75999999999999,
      526.545,
      115.9125
    );
    g.bezierVertex(
      519.4424999999999,
      99.62249999999999,
      487.605,
      36.12749999999999,
      485.745,
      32.11499999999998
    );
    g.bezierVertex(
      478.71,
      16.904999999999983,
      465.0225,
      5.6174999999999855,
      447.9675,
      5.6174999999999855
    );
    g.bezierVertex(
      430.91249999999997,
      5.6174999999999855,
      417.39,
      16.979999999999983,
      410.18999999999994,
      32.11499999999998
    );
    g.bezierVertex(
      408.555,
      35.55749999999999,
      386.6325,
      76.37249999999999,
      376.965,
      98.54249999999999
    );
    g.bezierVertex(
      371.52,
      111.03,
      366.075,
      123.52499999999999,
      360.62249999999995,
      136.0125
    );
    g.bezierVertex(
      352.4549999999999,
      154.7475,
      342.84,
      171.8775,
      343.03499999999997,
      192.87749999999997
    );
    g.bezierVertex(
      343.19249999999994,
      210.50999999999996,
      351.47249999999997,
      228.6675,
      366.84,
      238.005
    );
    g.bezierVertex(
      379.8225,
      245.89499999999998,
      396.03749999999997,
      247.9725,
      410.69999999999993,
      244.2225
    );
    g.bezierVertex(
      429.525,
      239.40749999999997,
      440.1524999999999,
      224.9475,
      448.1399999999999,
      208.56
    );
    g.bezierVertex(
      448.08749999999986,
      208.46249999999998,
      484.67999999999995,
      124.3575,
      484.67999999999995,
      124.3575
    );
    g.bezierVertex(
      484.76249999999993,
      124.17,
      484.9799999999999,
      124.08,
      485.1749999999999,
      124.16250000000001
    );
    g.bezierVertex(
      485.3624999999999,
      124.24500000000002,
      485.4524999999999,
      124.4625,
      485.3699999999999,
      124.6575
    );
    g.vertex(448.82999999999987, 208.5075);
    g.bezierVertex(
      449.1974999999999,
      210.315,
      449.6474999999999,
      211.7775,
      450.3074999999999,
      213.60000000000002
    );
    g.bezierVertex(
      462.0899999999999,
      245.58749999999998,
      502.28249999999986,
      254.3025,
      529.0874999999999,
      238.01250000000002
    );
    g.bezierVertex(
      552.1349999999999,
      224.0025,
      556.8824999999998,
      193.54500000000002,
      549.6224999999998,
      169.425
    );
    g.vertex(549.6299999999999, 169.425);
    g.endShape();
  },
  Style2: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(124.125, 122.9325);
    g.bezierVertex(
      124.17,
      122.97749999999999,
      109.42500000000001,
      135.5625,
      99.78750000000001,
      141.35999999999999
    );
    g.bezierVertex(
      90.78750000000001,
      146.77499999999998,
      73.8225,
      153.48,
      73.8225,
      153.48
    );
    g.bezierVertex(73.47, 153.69, 73.005, 153.5775, 72.795, 153.225);
    g.bezierVertex(
      72.58500000000001,
      152.8725,
      72.6975,
      152.40749999999997,
      73.05000000000001,
      152.1975
    );
    g.bezierVertex(
      73.05000000000001,
      152.1975,
      88.095,
      146.64749999999998,
      99.01500000000001,
      140.0775
    );
    g.bezierVertex(
      108.6525,
      134.28,
      122.37750000000001,
      122.68499999999999,
      122.60249999999999,
      122.79749999999999
    );
    g.bezierVertex(
      139.82999999999998,
      107.7675,
      152.6325,
      88.755,
      152.6325,
      66.5775
    );
    g.bezierVertex(
      152.6325,
      31.432499999999997,
      124.13999999999999,
      2.9400000000000013,
      88.995,
      2.9400000000000013
    );
    g.vertex(62.63249999999999, 2.9400000000000013);
    g.bezierVertex(29.490000000000002, 2.9325, 2.625, 29.7975, 2.625, 62.9325);
    g.vertex(2.625, 190.4325);
    g.bezierVertex(
      2.625,
      219.4275,
      26.130000000000003,
      242.93249999999998,
      55.125,
      242.93249999999998
    );
    g.vertex(130.125, 242.93249999999998);
    g.bezierVertex(
      159.12,
      242.93249999999998,
      182.625,
      219.4275,
      182.625,
      190.43249999999998
    );
    g.vertex(182.625, 182.93249999999998);
    g.bezierVertex(
      182.625,
      149.84999999999997,
      157.185,
      123.02249999999998,
      124.125,
      122.93249999999998
    );
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.875, 2.9325);
    g.vertex(262.875, 2.9325);
    g.bezierVertex(
      221.4525,
      2.9325,
      187.875,
      36.510000000000005,
      187.875,
      77.9325
    );
    g.vertex(187.875, 190.4325);
    g.bezierVertex(
      187.875,
      219.4275,
      211.38,
      242.93249999999998,
      240.375,
      242.93249999999998
    );
    g.vertex(285.375, 242.93249999999998);
    g.bezierVertex(
      314.37,
      242.93249999999998,
      337.875,
      219.4275,
      337.875,
      190.43249999999998
    );
    g.vertex(337.875, 77.9325);
    g.bezierVertex(
      337.875,
      36.51,
      304.2975,
      2.9324999999999974,
      262.875,
      2.9324999999999974
    );
    g.beginContour();
    g.vertex(286.485, 105.47999999999999);
    g.bezierVertex(
      286.485,
      105.47999999999999,
      275.415,
      118.96499999999997,
      267.39000000000004,
      126.8475
    );
    g.bezierVertex(
      257.62500000000006,
      136.4325,
      244.26000000000005,
      143.77499999999998,
      244.26000000000005,
      143.77499999999998
    );
    g.bezierVertex(
      243.95250000000004,
      144.0525,
      243.48000000000002,
      144.03,
      243.20250000000004,
      143.7225
    );
    g.bezierVertex(
      242.925,
      143.415,
      242.94750000000005,
      142.9425,
      243.25500000000002,
      142.665
    );
    g.bezierVertex(
      243.25500000000002,
      142.665,
      255.37500000000006,
      135.6825,
      266.385,
      125.73750000000001
    );
    g.bezierVertex(274.7325, 118.1925, 285.48, 104.37, 285.48, 104.37);
    g.bezierVertex(
      285.7875,
      104.0925,
      286.26,
      104.115,
      286.5375,
      104.42249999999999
    );
    g.bezierVertex(
      286.815,
      104.72999999999999,
      286.7925,
      105.20249999999999,
      286.485,
      105.47999999999999
    );
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(678.8175, 123.0);
    g.bezierVertex(
      678.7725,
      123.27000000000001,
      661.785,
      136.155,
      649.9125,
      142.245
    );
    g.bezierVertex(
      638.835,
      147.93,
      618.2175000000001,
      154.5075,
      618.2175000000001,
      154.5075
    );
    g.bezierVertex(
      617.7825,
      154.73250000000002,
      617.2425000000001,
      154.56,
      617.0175,
      154.125
    );
    g.bezierVertex(
      616.7925,
      153.69,
      616.965,
      153.14999999999998,
      617.4000000000001,
      152.925
    );
    g.bezierVertex(
      617.4000000000001,
      152.925,
      635.6400000000001,
      147.5625,
      649.095,
      140.66250000000002
    );
    g.bezierVertex(
      660.9675000000001,
      134.5725,
      677.7750000000001,
      121.98000000000002,
      677.8875,
      121.9725
    );
    g.bezierVertex(692.61, 107.97749999999999, 705.6, 90.765, 706.785, 69.8175);
    g.bezierVertex(
      707.895,
      50.16749999999999,
      699.3375000000001,
      30.697499999999994,
      684.3525,
      17.99999999999999
    );
    g.bezierVertex(
      672.915,
      8.30999999999999,
      658.215,
      2.9324999999999894,
      643.23,
      2.9324999999999894
    );
    g.vertex(616.8675000000001, 2.9324999999999894);
    g.bezierVertex(
      583.7325000000001,
      2.9324999999999894,
      556.8675000000001,
      29.797499999999992,
      556.8675000000001,
      62.93249999999999
    );
    g.vertex(556.8675000000001, 209.93249999999998);
    g.bezierVertex(
      556.8675000000001,
      228.15749999999997,
      571.6425,
      242.93249999999998,
      589.8675000000001,
      242.93249999999998
    );
    g.vertex(631.335, 242.93249999999998);
    g.bezierVertex(
      641.28,
      242.93249999999998,
      650.8199999999999,
      238.98,
      657.855,
      231.9525
    );
    g.vertex(698.085, 191.7225);
    g.bezierVertex(
      703.71,
      186.0975,
      706.875,
      178.46249999999998,
      706.875,
      170.5125
    );
    g.vertex(706.875, 152.94);
    g.bezierVertex(
      706.875,
      137.02499999999998,
      694.4775,
      124.01249999999999,
      678.8175,
      123.0075
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(549.2175, 166.425);
    g.bezierVertex(
      545.745,
      154.875,
      539.5124999999999,
      144.57750000000001,
      535.1025,
      133.4925
    );
    g.bezierVertex(
      532.3425,
      126.555,
      529.1175,
      119.7675,
      526.1324999999999,
      112.92
    );
    g.bezierVertex(
      519.0299999999999,
      96.63,
      487.3349999999999,
      33.435,
      485.3324999999999,
      29.115000000000006
    );
    g.bezierVertex(
      478.275,
      13.912500000000005,
      464.6099999999999,
      2.617500000000007,
      447.55499999999995,
      2.617500000000007
    );
    g.bezierVertex(
      430.4999999999999,
      2.617500000000007,
      417.03749999999997,
      14.010000000000005,
      409.7774999999999,
      29.115000000000006
    );
    g.bezierVertex(
      407.775,
      33.2775,
      386.2199999999999,
      73.3725,
      376.5524999999999,
      95.5425
    );
    g.vertex(360.2099999999999, 133.0125);
    g.bezierVertex(
      352.0424999999999,
      151.7475,
      342.4274999999999,
      168.8775,
      342.6224999999999,
      189.8775
    );
    g.bezierVertex(
      342.77999999999986,
      207.51,
      351.0599999999999,
      225.6675,
      366.4274999999999,
      235.005
    );
    g.bezierVertex(
      381.4874999999999,
      244.16249999999997,
      400.91999999999985,
      245.31,
      417.2099999999999,
      238.80749999999998
    );
    g.bezierVertex(
      432.9374999999999,
      232.52999999999997,
      443.0099999999999,
      218.22749999999996,
      447.98249999999985,
      202.14749999999998
    );
    g.vertex(447.98249999999985, 202.16249999999997);
    g.bezierVertex(
      447.98249999999985,
      202.22999999999996,
      450.3149999999999,
      187.02749999999997,
      450.3749999999999,
      178.62749999999997
    );
    g.bezierVertex(
      450.4574999999999,
      167.37749999999997,
      447.5849999999999,
      150.10499999999996,
      447.5849999999999,
      150.10499999999996
    );
    g.bezierVertex(
      447.5849999999999,
      149.69249999999997,
      447.92999999999995,
      149.35499999999996,
      448.34249999999986,
      149.36249999999995
    );
    g.bezierVertex(
      448.7549999999999,
      149.36999999999995,
      449.09249999999986,
      149.70749999999998,
      449.0849999999999,
      150.11999999999995
    );
    g.bezierVertex(
      449.0849999999999,
      150.11999999999995,
      451.9574999999999,
      167.39249999999996,
      451.8749999999999,
      178.64249999999996
    );
    g.bezierVertex(
      451.7999999999999,
      188.32499999999996,
      449.13749999999993,
      204.35249999999994,
      448.71749999999986,
      206.78999999999994
    );
    g.bezierVertex(
      455.9324999999999,
      240.92249999999993,
      500.59499999999986,
      252.06749999999994,
      528.675,
      235.00499999999994
    );
    g.bezierVertex(
      551.7224999999999,
      220.99499999999995,
      556.4699999999998,
      190.53749999999994,
      549.2099999999999,
      166.41749999999996
    );
    g.endShape();
  },
  Style3: (g) => {
    // p5.js code for compound path (outer shape with hole(s)):
    g.beginShape();
    g.vertex(262.74, 2.625);
    g.vertex(262.74, 2.625);
    g.bezierVertex(221.3175, 2.625, 187.74, 36.2025, 187.74, 77.625);
    g.vertex(187.74, 190.125);
    g.bezierVertex(
      187.74,
      219.11999999999998,
      211.24499999999998,
      242.625,
      240.24,
      242.625
    );
    g.vertex(285.24, 242.625);
    g.bezierVertex(314.235, 242.625, 337.74, 219.12, 337.74, 190.125);
    g.vertex(337.74, 77.625);
    g.bezierVertex(337.74, 36.2025, 304.1625, 2.625, 262.74, 2.625);
    g.beginContour();
    g.vertex(281.25, 156.2175);
    g.bezierVertex(
      270.555,
      152.355,
      262.9125,
      142.11749999999998,
      262.9125,
      130.08749999999998
    );
    g.bezierVertex(
      262.9125,
      142.245,
      255.105,
      152.5725,
      244.23,
      156.33749999999998
    );
    g.endContour();
    g.beginContour();
    g.vertex(244.2225, 103.83749999999999);
    g.bezierVertex(
      255.0975,
      107.60249999999999,
      262.90500000000003,
      117.92999999999998,
      262.90500000000003,
      130.08749999999998
    );
    g.bezierVertex(
      262.90500000000003,
      118.0575,
      270.5475,
      107.82,
      281.2425,
      103.95749999999998
    );
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(92.625, 153.60000000000002);
    g.bezierVertex(
      92.625,
      137.04000000000002,
      106.20750000000001,
      123.59250000000002,
      122.625,
      122.93250000000002
    );
    g.bezierVertex(
      122.73750000000001,
      122.93250000000002,
      122.51249999999999,
      122.93250000000002,
      122.625,
      122.93250000000002
    );
    g.bezierVertex(
      155.7525,
      122.20500000000001,
      182.625,
      149.7975,
      182.625,
      182.9325
    );
    g.vertex(182.625, 190.4325);
    g.bezierVertex(
      182.625,
      219.42750000000004,
      159.12,
      242.9325,
      130.125,
      242.9325
    );
    g.vertex(55.125, 242.9325);
    g.bezierVertex(
      26.130000000000003,
      242.9325,
      2.625,
      219.42750000000004,
      2.625,
      190.4325
    );
    g.vertex(2.625, 62.9325);
    g.bezierVertex(
      2.625,
      29.7975,
      29.490000000000002,
      2.9324999999999974,
      62.625,
      2.9324999999999974
    );
    g.vertex(88.98750000000001, 2.9324999999999974);
    g.bezierVertex(
      124.1325,
      2.9324999999999974,
      152.625,
      31.424999999999997,
      152.625,
      66.57
    );
    g.bezierVertex(
      152.625,
      108.3225,
      105.43499999999999,
      141.79500000000002,
      79.61250000000001,
      122.0175
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(479.3175, 159.135);
    g.bezierVertex(
      461.4525,
      162.78750000000002,
      448.01250000000005,
      178.5975,
      448.01250000000005,
      197.5425
    );
    g.bezierVertex(
      448.01250000000005,
      202.23749999999998,
      448.83750000000003,
      206.73749999999998,
      450.3525,
      210.91499999999996
    );
    g.bezierVertex(
      462.13500000000005,
      242.90249999999997,
      502.3275,
      251.61749999999995,
      529.1324999999999,
      235.3275
    );
    g.bezierVertex(
      552.1800000000001,
      221.3175,
      556.9275,
      190.85999999999999,
      549.6675,
      166.74
    );
    g.bezierVertex(
      546.1949999999999,
      155.19,
      539.9625,
      144.89249999999998,
      535.5525,
      133.8075
    );
    g.bezierVertex(
      532.7925,
      126.87,
      529.5674999999999,
      120.08249999999998,
      526.5825,
      113.23499999999999
    );
    g.bezierVertex(
      519.4799999999999,
      96.945,
      487.5824999999999,
      33.32249999999999,
      485.7824999999999,
      29.429999999999996
    );
    g.bezierVertex(
      478.75499999999994,
      14.212499999999997,
      465.05999999999995,
      2.9324999999999974,
      448.00499999999994,
      2.9324999999999974
    );
    g.bezierVertex(
      430.94999999999993,
      2.9324999999999974,
      417.42749999999995,
      14.294999999999996,
      410.22749999999996,
      29.429999999999996
    );
    g.bezierVertex(
      408.56999999999994,
      32.91,
      386.66999999999996,
      73.6875,
      377.00249999999994,
      95.85749999999999
    );
    g.bezierVertex(
      371.55749999999995,
      108.34499999999998,
      366.11249999999995,
      120.84,
      360.6599999999999,
      133.3275
    );
    g.bezierVertex(
      352.49249999999995,
      152.06249999999997,
      342.87749999999994,
      169.1925,
      343.07249999999993,
      190.1925
    );
    g.bezierVertex(
      343.2299999999999,
      207.825,
      351.50999999999993,
      225.98249999999996,
      366.87749999999994,
      235.32
    );
    g.bezierVertex(
      393.6899999999999,
      251.61,
      433.88249999999994,
      242.9025,
      445.66499999999996,
      210.90749999999997
    );
    g.bezierVertex(
      447.17999999999995,
      206.73749999999998,
      448.00499999999994,
      202.23,
      448.00499999999994,
      197.535
    );
    g.bezierVertex(
      448.00499999999994,
      178.59,
      434.56499999999994,
      162.78,
      416.69999999999993,
      159.1275
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(634.485, 122.52000000000001);
    g.bezierVertex(
      647.355,
      132.375,
      664.74,
      128.28750000000002,
      677.34,
      120.17250000000001
    );
    g.bezierVertex(
      692.535,
      110.385,
      703.8824999999999,
      93.97500000000001,
      706.77,
      76.05000000000001
    );
    g.bezierVertex(
      710.3325,
      53.97000000000001,
      701.925,
      32.812500000000014,
      684.9675,
      18.442500000000013
    );
    g.bezierVertex(
      673.53,
      8.752500000000014,
      658.8299999999999,
      3.3750000000000133,
      643.8449999999999,
      3.3750000000000133
    );
    g.vertex(617.4825, 3.3750000000000133);
    g.bezierVertex(
      584.3475,
      3.3750000000000133,
      557.4825,
      30.240000000000016,
      557.4825,
      63.375000000000014
    );
    g.vertex(557.4825, 210.375);
    g.bezierVertex(
      557.4825,
      228.60000000000002,
      572.2574999999999,
      243.375,
      590.4825,
      243.375
    );
    g.vertex(631.9499999999999, 243.375);
    g.bezierVertex(
      641.895,
      243.375,
      651.435,
      239.4225,
      658.4699999999999,
      232.395
    );
    g.vertex(698.6999999999999, 192.16500000000002);
    g.bezierVertex(
      704.3249999999999,
      186.54000000000002,
      707.49,
      178.90500000000003,
      707.49,
      170.955
    );
    g.vertex(707.49, 153.38250000000002);
    g.bezierVertex(
      707.49,
      136.815,
      694.0575,
      123.38250000000002,
      677.49,
      123.38250000000002
    );
    g.vertex(677.49, 123.44250000000002);
    g.bezierVertex(
      677.385,
      123.44250000000002,
      677.6099999999999,
      123.44250000000002,
      677.4975,
      123.44250000000002
    );
    g.bezierVertex(
      661.0799999999999,
      124.09500000000003,
      647.4975,
      137.54250000000002,
      647.4975,
      154.11
    );
    g.endShape();
  },
  Style4: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(120.30000000000001, 242.625);
    g.vertex(55.125, 242.625);
    g.bezierVertex(26.130000000000003, 242.625, 2.625, 219.12, 2.625, 190.125);
    g.vertex(2.625, 62.625);
    g.bezierVertex(
      2.625,
      29.490000000000002,
      29.490000000000002,
      2.625,
      62.625,
      2.625
    );
    g.vertex(88.98750000000001, 2.625);
    g.bezierVertex(
      124.1325,
      2.625,
      152.625,
      31.1175,
      152.625,
      66.26249999999999
    );
    g.bezierVertex(
      152.625,
      83.13749999999999,
      145.92000000000002,
      99.33,
      133.9875,
      111.26249999999999
    );
    g.bezierVertex(
      133.9875,
      111.26249999999999,
      122.625,
      122.625,
      122.625,
      122.6175
    );
    g.vertex(80.505, 164.7375);
    g.vertex(91.11, 175.34250000000003);
    g.bezierVertex(
      91.11,
      175.34250000000003,
      116.445,
      150.00750000000002,
      116.65500000000002,
      149.7975
    );
    g.bezierVertex(
      125.6175,
      140.83500000000004,
      139.0575,
      131.76,
      152.1825,
      131.76
    );
    g.bezierVertex(
      169.86,
      131.76,
      182.49750000000003,
      146.09250000000003,
      182.49750000000003,
      163.7775
    );
    g.vertex(182.49750000000003, 190.07999999999998);
    g.bezierVertex(
      182.49750000000003,
      219.07500000000002,
      160.68750000000006,
      242.57999999999998,
      131.69250000000002,
      242.57999999999998
    );
    g.vertex(120.29250000000003, 242.57999999999998);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(366.93, 235.57500000000002);
    g.bezierVertex(
      390.3075,
      249.15750000000003,
      419.01750000000004,
      241.65750000000003,
      434.34000000000003,
      220.4025
    );
    g.bezierVertex(
      439.245,
      213.59250000000003,
      440.2275,
      206.17499999999998,
      440.2275,
      198.1875
    );
    g.bezierVertex(
      440.2275,
      175.5675,
      440.2275,
      145.45499999999998,
      440.2275,
      122.83500000000001
    );
    g.vertex(455.9175, 122.83500000000001);
    g.bezierVertex(
      455.9175,
      145.45499999999998,
      455.9175,
      175.5675,
      455.9175,
      198.1875
    );
    g.bezierVertex(
      455.9175,
      206.17499999999998,
      456.9,
      213.59250000000003,
      461.805,
      220.4025
    );
    g.bezierVertex(
      477.12749999999994,
      241.64999999999998,
      505.83750000000003,
      249.15750000000003,
      529.215,
      235.57500000000002
    );
    g.bezierVertex(552.915, 221.805, 556.995, 191.0025, 549.6675, 166.635);
    g.bezierVertex(
      546.1949999999999,
      155.085,
      539.9625,
      144.78750000000002,
      535.5525,
      133.70250000000001
    );
    g.bezierVertex(
      532.7925,
      126.76500000000001,
      487.635,
      33.345000000000006,
      485.7824999999999,
      29.33250000000001
    );
    g.bezierVertex(
      478.74749999999995,
      14.12250000000001,
      465.05999999999995,
      2.8350000000000115,
      448.00499999999994,
      2.8350000000000115
    );
    g.bezierVertex(
      430.94999999999993,
      2.8350000000000115,
      417.42749999999995,
      14.19750000000001,
      410.22749999999996,
      29.33250000000001
    );
    g.bezierVertex(
      408.5925,
      32.77500000000001,
      366.11249999999995,
      120.7425,
      360.6599999999999,
      133.23000000000002
    );
    g.bezierVertex(
      352.6649999999999,
      151.5675,
      343.0199999999999,
      170.39249999999998,
      342.88499999999993,
      190.8675
    );
    g.bezierVertex(
      342.7649999999999,
      209.10750000000002,
      350.8649999999999,
      226.23,
      366.9224999999999,
      235.56750000000002
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(669.1949999999999, 2.8425000000000002);
    g.vertex(610.785, 2.8425000000000002);
    g.bezierVertex(
      581.79,
      2.8425000000000002,
      558.285,
      26.347500000000004,
      558.285,
      55.3425
    );
    g.vertex(558.285, 212.84250000000003);
    g.bezierVertex(
      558.285,
      229.41,
      571.7175,
      242.84250000000003,
      588.285,
      242.84250000000003
    );
    g.vertex(634.8824999999999, 242.84250000000003);
    g.bezierVertex(
      643.41,
      242.84250000000003,
      651.5325,
      239.21250000000003,
      657.2249999999999,
      232.86
    );
    g.vertex(704.4525, 180.14249999999998);
    g.bezierVertex(
      706.92,
      177.39000000000001,
      708.2775,
      173.82750000000001,
      708.2775,
      170.13
    );
    g.vertex(708.2775, 139.695);
    g.bezierVertex(
      708.2775,
      126.7875,
      698.235,
      115.85999999999999,
      685.3425,
      115.3425
    );
    g.bezierVertex(
      684.9375,
      115.32749999999999,
      684.525,
      115.32,
      684.1125,
      115.32
    );
    g.bezierVertex(672.015, 115.32, 660.8025, 126.255, 660.8025, 126.255);
    g.vertex(625.8824999999999, 160.5975);
    g.vertex(615.2775, 149.9925);
    g.vertex(689.8575, 76.935);
    g.vertex(696.87, 69.92250000000001);
    g.bezierVertex(
      704.2425000000001,
      62.55000000000001,
      708.3824999999999,
      52.56000000000001,
      708.3824999999999,
      42.13500000000002
    );
    g.vertex(708.3824999999999, 42.13500000000002);
    g.bezierVertex(
      708.3824999999999,
      20.430000000000014,
      690.7874999999999,
      2.835000000000017,
      669.0825,
      2.835000000000017
    );
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.77750000000003, 2.625);
    g.vertex(262.77750000000003, 2.625);
    g.bezierVertex(221.355, 2.625, 187.7775, 36.2025, 187.7775, 77.625);
    g.vertex(187.7775, 190.125);
    g.bezierVertex(
      187.7775,
      219.11999999999998,
      211.28249999999997,
      242.625,
      240.2775,
      242.625
    );
    g.vertex(285.27750000000003, 242.625);
    g.bezierVertex(
      314.2725,
      242.625,
      337.77750000000003,
      219.12,
      337.77750000000003,
      190.125
    );
    g.vertex(337.77750000000003, 77.625);
    g.bezierVertex(
      337.77750000000003,
      36.2025,
      304.20000000000005,
      2.625,
      262.77750000000003,
      2.625
    );
    g.beginContour();
    g.vertex(270.27750000000003, 166.5);
    g.vertex(255.2775, 166.5);
    g.vertex(255.2775, 91.5);
    g.vertex(270.27750000000003, 91.5);
    g.vertex(270.27750000000003, 166.5);
    g.endContour();
    g.endShape();
  },
  Style5: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(120.30000000000001, 242.625);
    g.vertex(55.125, 242.625);
    g.bezierVertex(26.130000000000003, 242.625, 2.625, 219.12, 2.625, 190.125);
    g.vertex(2.625, 62.625);
    g.bezierVertex(
      2.625,
      29.490000000000002,
      29.490000000000002,
      2.625,
      62.625,
      2.625
    );
    g.vertex(88.98750000000001, 2.625);
    g.bezierVertex(
      124.1325,
      2.625,
      152.625,
      31.1175,
      152.625,
      66.26249999999999
    );
    g.bezierVertex(
      152.625,
      83.13749999999999,
      145.92000000000002,
      99.33,
      133.9875,
      111.26249999999999
    );
    g.bezierVertex(
      133.9875,
      111.26249999999999,
      122.625,
      122.625,
      122.625,
      122.6175
    );
    g.vertex(85.8075, 159.435);
    g.bezierVertex(
      82.875,
      162.3675,
      82.875,
      167.115,
      85.8075,
      170.04000000000002
    );
    g.vertex(85.8075, 170.04000000000002);
    g.bezierVertex(
      88.74,
      172.97250000000003,
      93.4875,
      172.97250000000003,
      96.41250000000001,
      170.04000000000002
    );
    g.vertex(116.65500000000002, 149.7975);
    g.bezierVertex(
      125.6175,
      140.83500000000004,
      139.0575,
      131.76,
      152.1825,
      131.76
    );
    g.bezierVertex(
      169.86,
      131.76,
      182.49750000000003,
      146.09250000000003,
      182.49750000000003,
      163.7775
    );
    g.vertex(182.49750000000003, 190.07999999999998);
    g.bezierVertex(
      182.49750000000003,
      219.07500000000002,
      158.99250000000004,
      242.57999999999998,
      129.99750000000003,
      242.57999999999998
    );
    g.vertex(120.29250000000003, 242.57999999999998);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(366.12, 235.365);
    g.bezierVertex(
      389.49750000000006,
      248.9475,
      418.2075,
      241.4475,
      433.53,
      220.1925
    );
    g.bezierVertex(
      438.43499999999995,
      213.3825,
      439.4175,
      205.965,
      439.4175,
      197.97749999999996
    );
    g.vertex(439.4175, 130.46999999999997);
    g.bezierVertex(
      439.4175,
      126.13499999999999,
      442.92749999999995,
      122.62499999999997,
      447.26250000000005,
      122.62499999999997
    );
    g.vertex(447.26250000000005, 122.62499999999997);
    g.bezierVertex(
      451.59749999999997,
      122.62499999999997,
      455.1075000000001,
      126.13499999999999,
      455.1075000000001,
      130.46999999999997
    );
    g.vertex(455.1075000000001, 197.97749999999996);
    g.bezierVertex(
      455.1075000000001,
      205.96499999999997,
      456.09000000000003,
      213.3825,
      460.99500000000006,
      220.1925
    );
    g.bezierVertex(
      476.3175,
      241.43999999999997,
      505.0275000000001,
      248.94749999999996,
      528.4050000000001,
      235.365
    );
    g.bezierVertex(
      552.105,
      221.59499999999997,
      556.1850000000001,
      190.7925,
      548.8575000000001,
      166.42499999999998
    );
    g.bezierVertex(
      545.385,
      154.87499999999997,
      539.1525,
      144.5775,
      534.7425000000001,
      133.49249999999998
    );
    g.bezierVertex(
      531.9825000000001,
      126.55499999999998,
      486.82500000000005,
      33.134999999999984,
      484.97249999999997,
      29.122499999999988
    );
    g.bezierVertex(
      477.9375,
      13.912499999999987,
      464.25,
      2.6249999999999893,
      447.195,
      2.6249999999999893
    );
    g.bezierVertex(
      430.14,
      2.6249999999999893,
      416.6175,
      13.987499999999988,
      409.4175,
      29.122499999999988
    );
    g.bezierVertex(
      407.7825,
      32.56499999999999,
      365.3025,
      120.53249999999998,
      359.84999999999997,
      133.01999999999998
    );
    g.bezierVertex(
      351.85499999999996,
      151.3575,
      342.21,
      170.18249999999998,
      342.075,
      190.65749999999997
    );
    g.bezierVertex(
      341.9549999999999,
      208.89749999999998,
      350.05499999999995,
      226.01999999999998,
      366.11249999999995,
      235.35750000000002
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(668.385, 2.625);
    g.vertex(609.9749999999999, 2.625);
    g.bezierVertex(
      580.98,
      2.625,
      557.4749999999999,
      26.130000000000003,
      557.4749999999999,
      55.125
    );
    g.vertex(557.4749999999999, 212.625);
    g.bezierVertex(
      557.4749999999999,
      229.1925,
      570.9074999999999,
      242.625,
      587.4749999999999,
      242.625
    );
    g.vertex(634.0725, 242.625);
    g.bezierVertex(
      642.5999999999999,
      242.625,
      650.7225,
      238.995,
      656.415,
      232.64249999999998
    );
    g.vertex(703.6424999999999, 179.92499999999998);
    g.bezierVertex(
      706.1099999999999,
      177.17249999999999,
      707.4675,
      173.60999999999999,
      707.4675,
      169.9125
    );
    g.vertex(707.4675, 139.47749999999996);
    g.bezierVertex(
      707.4675,
      126.56999999999996,
      697.425,
      115.64249999999998,
      684.5324999999999,
      115.12499999999997
    );
    g.bezierVertex(
      684.1274999999999,
      115.10999999999997,
      683.7149999999999,
      115.10249999999998,
      683.3025,
      115.10249999999998
    );
    g.bezierVertex(
      671.2049999999999,
      115.10249999999998,
      659.9925,
      126.0375,
      659.9925,
      126.0375
    );
    g.vertex(630.3675, 155.1675);
    g.bezierVertex(
      627.435,
      158.05499999999998,
      622.7249999999999,
      158.03249999999997,
      619.8149999999998,
      155.1225
    );
    g.vertex(619.8149999999998, 155.1225);
    g.bezierVertex(
      616.8675,
      152.17499999999998,
      616.8899999999999,
      147.39,
      619.8675,
      144.4725
    );
    g.vertex(689.04, 76.71000000000001);
    g.vertex(696.0525, 69.6975);
    g.bezierVertex(
      703.425,
      62.325,
      707.5649999999999,
      52.335,
      707.5649999999999,
      41.91000000000001
    );
    g.vertex(707.5649999999999, 41.91000000000001);
    g.bezierVertex(
      707.5649999999999,
      20.205000000000005,
      689.9699999999999,
      2.6100000000000083,
      668.265,
      2.6100000000000083
    );
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(315.15749999999997, 24.5925);
    g.bezierVertex(
      301.59000000000003,
      11.017499999999998,
      282.84000000000003,
      2.625,
      262.125,
      2.625
    );
    g.bezierVertex(
      220.70999999999998,
      2.625,
      187.125,
      36.2025,
      187.125,
      77.625
    );
    g.vertex(187.125, 190.125);
    g.bezierVertex(
      187.125,
      219.11999999999998,
      210.63,
      242.625,
      239.625,
      242.625
    );
    g.vertex(284.625, 242.625);
    g.bezierVertex(313.62, 242.625, 337.125, 219.12, 337.125, 190.125);
    g.vertex(337.125, 77.625);
    g.bezierVertex(
      337.125,
      56.917500000000004,
      328.7325,
      38.167500000000004,
      315.15749999999997,
      24.592500000000005
    );
    g.beginContour();
    g.vertex(269.625, 159.0075);
    g.bezierVertex(269.625, 163.1475, 266.2725, 166.5075, 262.125, 166.5075);
    g.bezierVertex(257.9775, 166.5075, 254.625, 163.1475, 254.625, 159.0075);
    g.vertex(254.625, 99.0075);
    g.bezierVertex(
      254.625,
      94.85999999999999,
      257.985,
      91.5075,
      262.125,
      91.5075
    );
    g.bezierVertex(264.195, 91.5075, 266.07, 92.3475, 267.4275, 93.705);
    g.bezierVertex(
      268.78499999999997,
      95.0625,
      269.625,
      96.9375,
      269.625,
      99.0075
    );
    g.vertex(269.625, 159.0075);
    g.endContour();
    g.endShape();
  },
  Style6: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(645.33, 123.54749999999999);
    g.bezierVertex(
      636.5250000000001,
      131.9775,
      627.6675,
      140.8275,
      616.7625,
      146.29500000000002
    );
    g.bezierVertex(
      614.94,
      147.21,
      612.855,
      147.6225,
      611.1075000000001,
      147.93
    );
    g.bezierVertex(
      615.8325,
      153.21750000000003,
      620.9775,
      158.1825,
      625.9125,
      163.2825
    );
    g.bezierVertex(
      625.5975000000001,
      158.6475,
      636.585,
      144.63,
      636.585,
      144.63
    );
    g.bezierVertex(
      641.2275000000001,
      139.14000000000001,
      650.0250000000001,
      130.05,
      657.1275,
      123.12750000000001
    );
    g.bezierVertex(
      664.7475000000001,
      115.68750000000003,
      675.5550000000001,
      104.35500000000002,
      687.0600000000001,
      106.32750000000001
    );
    g.bezierVertex(
      697.965,
      108.20250000000001,
      705.975,
      119.28750000000001,
      705.975,
      130.0575
    );
    g.vertex(705.975, 170.4225);
    g.bezierVertex(
      705.975,
      174.12,
      704.61,
      177.6825,
      702.1500000000001,
      180.435
    );
    g.vertex(654.9225, 233.1525);
    g.bezierVertex(
      649.23,
      239.50500000000002,
      641.1075000000001,
      243.135,
      632.58,
      243.135
    );
    g.vertex(585.9825000000001, 243.135);
    g.bezierVertex(
      569.415,
      243.135,
      555.9825000000001,
      229.7025,
      555.9825000000001,
      213.135
    );
    g.vertex(555.9825000000001, 55.6275);
    g.bezierVertex(
      555.9825000000001,
      26.632500000000004,
      579.4875000000001,
      3.1275000000000013,
      608.4825000000001,
      3.1275000000000013
    );
    g.vertex(666.8925, 3.1275000000000013);
    g.bezierVertex(
      666.8925,
      3.1275000000000013,
      666.7725,
      3.1275000000000013,
      666.7725,
      3.1275000000000013
    );
    g.bezierVertex(
      688.4775000000001,
      3.1275000000000013,
      706.0725,
      20.722500000000004,
      706.0725,
      42.4275
    );
    g.bezierVertex(
      706.0725,
      60.105000000000004,
      694.9650000000001,
      75.11250000000001,
      683.22,
      87.285
    );
    g.bezierVertex(
      672.4950000000001,
      98.39999999999999,
      661.125,
      108.86250000000001,
      649.7925,
      119.34
    );
    g.bezierVertex(
      648.3,
      120.72,
      646.8225,
      122.1225,
      645.3375,
      123.54750000000001
    );
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.34250000000003, 3.3825);
    g.vertex(262.34250000000003, 3.3825);
    g.bezierVertex(
      220.92000000000002,
      3.3825,
      187.34250000000003,
      36.96,
      187.34250000000003,
      78.38250000000001
    );
    g.vertex(187.34250000000003, 198.3825);
    g.bezierVertex(
      187.34250000000003,
      223.23749999999998,
      207.4875,
      243.3825,
      232.34250000000003,
      243.3825
    );
    g.vertex(292.34250000000003, 243.3825);
    g.bezierVertex(
      317.1975,
      243.3825,
      337.34250000000003,
      223.23749999999998,
      337.34250000000003,
      198.3825
    );
    g.vertex(337.34250000000003, 78.38250000000001);
    g.bezierVertex(
      337.34250000000003,
      36.96000000000001,
      303.76500000000004,
      3.382500000000004,
      262.34250000000003,
      3.382500000000004
    );
    g.beginContour();
    g.vertex(273.59250000000003, 171.0075);
    g.vertex(251.09250000000003, 171.0075);
    g.bezierVertex(
      251.09250000000003,
      171.0075,
      259.53000000000003,
      164.13,
      259.53000000000003,
      129.7575
    );
    g.bezierVertex(
      259.53000000000003,
      95.38499999999999,
      251.09250000000003,
      88.5075,
      251.09250000000003,
      88.5075
    );
    g.vertex(273.59250000000003, 88.5075);
    g.bezierVertex(
      273.59250000000003,
      88.5075,
      265.15500000000003,
      95.38499999999999,
      265.15500000000003,
      129.7575
    );
    g.bezierVertex(
      265.15500000000003,
      164.13,
      273.59250000000003,
      171.0075,
      273.59250000000003,
      171.0075
    );
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(120.63749999999999, 243.60750000000002);
    g.vertex(132.0375, 243.60750000000002);
    g.bezierVertex(
      161.03249999999997,
      243.60750000000002,
      182.84249999999997,
      220.10250000000002,
      182.84249999999997,
      191.10750000000002
    );
    g.vertex(182.84249999999997, 164.805);
    g.bezierVertex(
      182.84249999999997,
      152.175,
      175.91249999999997,
      139.86,
      163.96499999999997,
      134.985
    );
    g.bezierVertex(
      148.16999999999996,
      128.54250000000002,
      128.93249999999995,
      131.43,
      116.72249999999995,
      143.46000000000004
    );
    g.bezierVertex(
      110.92499999999995,
      149.16750000000002,
      105.31499999999994,
      155.07000000000002,
      99.98249999999996,
      161.22000000000003
    );
    g.bezierVertex(
      98.35499999999996,
      163.09500000000003,
      84.67499999999995,
      178.35750000000002,
      84.26249999999996,
      182.54250000000002
    );
    g.bezierVertex(
      79.45499999999996,
      176.91750000000002,
      74.64749999999995,
      171.29250000000002,
      69.83999999999995,
      165.675
    );
    g.bezierVertex(
      92.50499999999995,
      156.09750000000003,
      112.89749999999994,
      141.19500000000005,
      128.90249999999997,
      122.49750000000003
    );
    g.bezierVertex(
      140.63249999999994,
      108.79500000000002,
      150.20999999999995,
      92.51250000000005,
      152.34749999999997,
      74.59500000000003
    );
    g.bezierVertex(
      153.89249999999996,
      61.60500000000003,
      151.36499999999995,
      48.15750000000003,
      145.21499999999997,
      36.61500000000002
    );
    g.bezierVertex(
      138.93749999999994,
      24.825000000000028,
      128.84999999999997,
      15.037500000000026,
      116.69999999999996,
      9.49500000000003
    );
    g.bezierVertex(
      104.36999999999995,
      3.8700000000000294,
      90.48749999999995,
      2.707500000000029,
      76.92749999999995,
      2.632500000000029
    );
    g.bezierVertex(
      61.79249999999995,
      2.550000000000029,
      45.62249999999995,
      4.042500000000029,
      32.20499999999995,
      11.640000000000029
    );
    g.bezierVertex(18.015, 19.6725, 8.325, 33.7575, 4.9125, 49.56);
    g.bezierVertex(2.58, 60.39, 2.6025, 71.565, 2.6325, 82.6425);
    g.bezierVertex(
      2.7299999999999995,
      114.53999999999999,
      2.82,
      146.4375,
      2.9174999999999995,
      178.3275
    );
    g.bezierVertex(
      2.9549999999999996,
      190.28249999999997,
      3.0675,
      202.63499999999996,
      7.919999999999999,
      213.5625
    );
    g.bezierVertex(13.305, 225.6975, 24.315, 234.93, 36.84, 239.3475);
    g.bezierVertex(
      48.885000000000005,
      243.59250000000003,
      61.9425,
      243.6225,
      74.70750000000001,
      243.615
    );
    g.vertex(120.64500000000001, 243.615);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(446.7975, 2.625);
    g.bezierVertex(429.75, 2.625, 416.055, 13.905, 409.02, 29.1225);
    g.bezierVertex(
      407.22,
      33.015,
      375.3225,
      96.63749999999999,
      368.22,
      112.9275
    );
    g.bezierVertex(
      365.235,
      119.77499999999999,
      362.01000000000005,
      126.5625,
      359.25000000000006,
      133.5
    );
    g.bezierVertex(
      354.84000000000003,
      144.585,
      348.6075000000001,
      154.8825,
      345.13500000000005,
      166.4325
    );
    g.bezierVertex(
      338.08500000000004,
      189.87,
      343.14750000000004,
      222.89999999999998,
      365.83500000000004,
      236.1225
    );
    g.vertex(365.9175000000001, 236.1225);
    g.bezierVertex(
      365.9175000000001,
      236.1225,
      365.6700000000001,
      236.1225,
      365.6700000000001,
      236.1225
    );
    g.bezierVertex(
      380.2650000000001,
      244.62749999999997,
      398.46000000000004,
      245.0775,
      413.57250000000005,
      237.48
    );
    g.bezierVertex(
      420.90000000000003,
      233.79749999999996,
      428.02500000000003,
      228.14999999999998,
      432.57000000000005,
      221.445
    );
    g.bezierVertex(
      444.67500000000007,
      203.565,
      443.5875000000001,
      185.13,
      443.5875000000001,
      164.6325
    );
    g.bezierVertex(
      443.5875000000001,
      130.26,
      434.7900000000001,
      123.3825,
      434.7900000000001,
      123.3825
    );
    g.vertex(458.2500000000001, 123.3825);
    g.bezierVertex(
      458.2500000000001,
      123.3825,
      449.4525000000001,
      130.26,
      449.4525000000001,
      164.6325
    );
    g.bezierVertex(
      449.4525000000001,
      185.1375,
      448.365,
      203.5725,
      460.47000000000014,
      221.445
    );
    g.bezierVertex(
      465.0150000000001,
      228.14999999999998,
      472.1400000000001,
      233.7975,
      479.46750000000014,
      237.48
    );
    g.bezierVertex(
      494.5725000000001,
      245.07,
      512.7750000000001,
      244.62749999999997,
      527.3700000000001,
      236.115
    );
    g.vertex(527.4525000000001, 236.115);
    g.bezierVertex(
      550.1400000000001,
      222.89249999999998,
      555.2025000000001,
      189.86249999999998,
      548.1525000000001,
      166.42499999999998
    );
    g.bezierVertex(
      544.6800000000002,
      154.87499999999997,
      538.4475000000001,
      144.5775,
      534.0375000000001,
      133.49249999999998
    );
    g.bezierVertex(
      531.2775000000001,
      126.55499999999998,
      528.0525000000001,
      119.76749999999998,
      525.0675000000001,
      112.91999999999999
    );
    g.bezierVertex(
      517.9650000000001,
      96.62999999999998,
      486.0675000000001,
      33.00749999999998,
      484.26750000000015,
      29.114999999999984
    );
    g.bezierVertex(
      477.2400000000001,
      13.897499999999985,
      463.54500000000013,
      2.6174999999999855,
      446.4900000000001,
      2.6174999999999855
    );
    g.endShape();
  },
  Style7: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(115.85999999999999, 129.71249999999998);
    g.bezierVertex(
      117.27749999999997,
      128.04749999999999,
      118.74749999999999,
      126.4275,
      120.35249999999999,
      124.89750000000001
    );
    g.bezierVertex(
      140.6475,
      105.5325,
      158.865,
      76.9425,
      149.77499999999998,
      47.6925
    );
    g.bezierVertex(
      144.0375,
      29.235000000000003,
      129.78,
      14.0625,
      111.73499999999999,
      7.155000000000005
    );
    g.bezierVertex(
      104.49,
      4.380000000000004,
      96.75,
      2.9700000000000046,
      88.9875,
      2.9700000000000046
    );
    g.vertex(62.625, 2.9700000000000046);
    g.bezierVertex(
      29.490000000000002,
      2.9625000000000004,
      2.625,
      29.8275,
      2.625,
      62.962500000000006
    );
    g.vertex(2.625, 190.46249999999998);
    g.bezierVertex(
      2.625,
      219.4575,
      26.130000000000003,
      242.96249999999998,
      55.125,
      242.96249999999998
    );
    g.vertex(130.125, 242.96249999999998);
    g.bezierVertex(
      159.12,
      242.96249999999998,
      182.625,
      219.4575,
      182.625,
      190.46249999999998
    );
    g.vertex(182.625, 182.96249999999998);
    g.bezierVertex(
      182.625,
      163.84499999999997,
      183.315,
      141.75,
      168.915,
      128.355
    );
    g.bezierVertex(
      160.56,
      120.58499999999998,
      146.02499999999998,
      117.62249999999999,
      135.0675,
      119.72999999999999
    );
    g.bezierVertex(
      110.83500000000001,
      124.38749999999999,
      98.61000000000001,
      152.01,
      102.42,
      174.79500000000002
    );
    g.bezierVertex(
      95.145,
      170.715,
      87.8775,
      166.6275,
      80.60249999999999,
      162.5475
    );
    g.bezierVertex(
      91.8225,
      157.095,
      100.76249999999999,
      148.095,
      108.64500000000001,
      138.60750000000002
    );
    g.bezierVertex(
      111.10500000000002,
      135.645,
      113.39250000000001,
      132.60000000000002,
      115.85250000000002,
      129.70499999999998
    );
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(342.0225, 183.0675);
    g.bezierVertex(
      344.1525,
      165.66,
      352.23,
      149.3775,
      359.1675,
      133.46249999999998
    );
    g.bezierVertex(
      364.61249999999995,
      120.975,
      407.09999999999997,
      33.00749999999999,
      408.735,
      29.56499999999999
    );
    g.bezierVertex(
      415.9275,
      14.422499999999989,
      429.4575,
      3.067499999999992,
      446.51250000000005,
      3.067499999999992
    );
    g.bezierVertex(
      463.5675,
      3.067499999999992,
      477.24750000000006,
      14.354999999999993,
      484.29,
      29.56499999999999
    );
    g.bezierVertex(
      486.15000000000003,
      33.57749999999999,
      531.3,
      126.99749999999999,
      534.0600000000001,
      133.935
    );
    g.bezierVertex(
      541.485,
      152.60249999999996,
      551.895,
      170.4525,
      551.625,
      191.16
    );
    g.bezierVertex(
      551.3925,
      208.935,
      543.495,
      226.64249999999998,
      527.7375,
      235.80749999999998
    );
    g.bezierVertex(
      521.04,
      239.7,
      513.0825,
      241.99499999999998,
      505.62749999999994,
      242.78249999999997
    );
    g.bezierVertex(
      485.2575,
      244.92000000000002,
      465.25499999999994,
      235.0725,
      454.72499999999997,
      218.3475
    );
    g.bezierVertex(
      447.35249999999996,
      206.6325,
      445.7699999999999,
      192.33749999999998,
      447.0225,
      178.9425
    );
    g.bezierVertex(
      448.16999999999996,
      166.6725,
      450.9074999999999,
      150.3675,
      460.485,
      141.3825
    );
    g.vertex(432.12, 141.36749999999998);
    g.bezierVertex(
      441.6975,
      150.35249999999996,
      444.42749999999995,
      166.65749999999997,
      445.5825,
      178.9275
    );
    g.bezierVertex(
      446.8425,
      192.3225,
      445.25249999999994,
      206.6175,
      437.88,
      218.3325
    );
    g.bezierVertex(
      427.35,
      235.065,
      407.34749999999997,
      244.90500000000003,
      386.9775,
      242.76749999999998
    );
    g.bezierVertex(
      379.52250000000004,
      241.98749999999998,
      372.225,
      239.7075,
      365.52750000000003,
      235.815
    );
    g.bezierVertex(
      347.4975,
      225.32999999999998,
      339.7125,
      204.3225,
      342.03000000000003,
      183.07500000000002
    );
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.125, 2.9625000000000004);
    g.vertex(262.125, 2.9625000000000004);
    g.bezierVertex(
      220.7025,
      2.9625000000000004,
      187.125,
      36.540000000000006,
      187.125,
      77.9625
    );
    g.vertex(187.125, 190.46249999999998);
    g.bezierVertex(
      187.125,
      219.4575,
      210.63,
      242.96249999999998,
      239.625,
      242.96249999999998
    );
    g.vertex(284.625, 242.96249999999998);
    g.bezierVertex(
      313.62,
      242.96249999999998,
      337.125,
      219.4575,
      337.125,
      190.46249999999998
    );
    g.vertex(337.125, 77.9625);
    g.bezierVertex(
      337.125,
      36.540000000000006,
      303.5475,
      2.962500000000002,
      262.125,
      2.962500000000002
    );
    g.beginContour();
    g.vertex(246.255, 146.57999999999998);
    g.bezierVertex(
      246.255,
      146.57999999999998,
      257.54999999999995,
      143.5725,
      259.67999999999995,
      126.21000000000001
    );
    g.bezierVertex(
      260.9325,
      115.9425,
      262.12499999999994,
      99.35249999999999,
      262.12499999999994,
      99.35249999999999
    );
    g.bezierVertex(
      262.12499999999994,
      99.35249999999999,
      263.7075,
      115.57499999999999,
      265.11749999999995,
      126.21000000000001
    );
    g.bezierVertex(
      267.42749999999995,
      143.5575,
      277.995,
      146.57999999999998,
      277.995,
      146.57999999999998
    );
    g.vertex(246.255, 146.57999999999998);
    g.endContour();
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(706.1025, 152.625);
    g.bezierVertex(
      706.1025,
      144.92249999999999,
      707.5125,
      135.89999999999998,
      704.6775,
      128.5275
    );
    g.bezierVertex(
      701.625,
      120.60000000000001,
      691.7325000000001,
      117.72749999999999,
      683.91,
      119.45250000000001
    );
    g.bezierVertex(
      679.0725,
      120.5175,
      674.9775,
      123.66750000000002,
      671.34,
      127.0275
    );
    g.bezierVertex(664.83, 133.035, 659.1975, 139.9725, 654.54, 147.51);
    g.bezierVertex(
      651.3525,
      152.66250000000002,
      650.4075,
      158.54250000000002,
      649.9725,
      164.595
    );
    g.bezierVertex(
      643.8,
      157.53000000000003,
      637.6274999999999,
      150.4575,
      631.4549999999999,
      143.39249999999998
    );
    g.bezierVertex(
      638.1075,
      143.8125,
      642.3824999999999,
      143.89499999999998,
      647.4374999999999,
      141.7575
    );
    g.bezierVertex(
      673.0949999999999,
      130.9125,
      706.6874999999999,
      99.90749999999998,
      706.0124999999999,
      69.495
    );
    g.vertex(706.0124999999999, 69.525);
    g.bezierVertex(
      707.1225,
      49.875,
      698.5649999999999,
      30.405000000000005,
      683.5799999999999,
      17.7075
    );
    g.bezierVertex(
      672.1424999999999,
      8.0175,
      657.4424999999999,
      2.6399999999999997,
      642.4575,
      2.6399999999999997
    );
    g.vertex(616.0949999999999, 2.6399999999999997);
    g.bezierVertex(
      582.96,
      2.6399999999999997,
      556.0949999999999,
      29.505000000000003,
      556.0949999999999,
      62.64
    );
    g.vertex(556.0949999999999, 209.64);
    g.bezierVertex(
      556.0949999999999,
      227.865,
      570.87,
      242.64,
      589.0949999999999,
      242.64
    );
    g.vertex(630.5624999999999, 242.64);
    g.bezierVertex(
      640.5074999999999,
      242.64,
      650.0474999999999,
      238.6875,
      657.0825,
      231.66
    );
    g.vertex(697.3124999999999, 191.43);
    g.bezierVertex(
      702.9374999999999,
      185.805,
      706.1025,
      178.17000000000002,
      706.1025,
      170.22
    );
    g.bezierVertex(706.1025, 170.22, 706.1025, 152.685, 706.1025, 152.6475);
    g.endShape();
  },
  Style8: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(87.57000000000001, 178.4775);
    g.bezierVertex(
      95.955,
      184.0575,
      107.6775,
      182.6775,
      113.73750000000001,
      174.345
    );
    g.bezierVertex(
      119.85000000000001,
      165.94500000000002,
      118.095,
      156.07500000000002,
      119.82750000000001,
      146.4975
    );
    g.bezierVertex(
      121.3575,
      138.07500000000002,
      126.75750000000002,
      128.41500000000002,
      133.77,
      123.39000000000001
    );
    g.bezierVertex(
      150.70499999999998,
      111.255,
      167.10000000000002,
      117.38250000000002,
      176.9925,
      131.5875
    );
    g.bezierVertex(185.46, 143.7375, 182.34, 162.19500000000002, 183.3, 176.97);
    g.bezierVertex(
      184.07999999999998,
      188.9925,
      182.685,
      201.315,
      177.89249999999998,
      212.3775
    );
    g.bezierVertex(
      173.10000000000002,
      223.4325,
      164.7075,
      233.145,
      153.81,
      238.29000000000002
    );
    g.bezierVertex(
      138.2475,
      245.63250000000005,
      120.10499999999999,
      243.01500000000004,
      102.89999999999999,
      242.85000000000002
    );
    g.bezierVertex(
      84.14249999999998,
      242.67000000000002,
      65.19,
      245.59500000000003,
      46.74749999999999,
      242.1975
    );
    g.bezierVertex(
      36.49499999999999,
      240.3075,
      26.35499999999999,
      236.31,
      18.847499999999986,
      229.07999999999998
    );
    g.bezierVertex(
      11.212499999999986,
      221.7225,
      6.817499999999987,
      211.52249999999998,
      4.709999999999985,
      201.1275
    );
    g.bezierVertex(
      2.602499999999985,
      190.73250000000002,
      2.6174999999999846,
      180.04500000000002,
      2.6324999999999847,
      169.4475
    );
    g.bezierVertex(
      2.677499999999985,
      141.2475,
      2.729999999999985,
      113.04000000000002,
      2.774999999999985,
      84.84
    );
    g.bezierVertex(
      2.812499999999985,
      64.17,
      3.397499999999985,
      41.81250000000001,
      16.117499999999986,
      25.515000000000008
    );
    g.bezierVertex(
      30.54,
      7.035,
      56.44500000000001,
      1.9725,
      79.88250000000001,
      2.6925
    );
    g.bezierVertex(
      95.22,
      3.1574999999999998,
      110.955,
      5.6925,
      124.02000000000001,
      13.725000000000001
    );
    g.bezierVertex(
      140.6925,
      23.97,
      151.4325,
      42.900000000000006,
      152.61,
      62.42999999999999
    );
    g.bezierVertex(
      153.84750000000003,
      82.89750000000001,
      144.8775,
      103.41,
      129.96750000000003,
      117.3075
    );
    g.bezierVertex(
      119.31750000000002,
      127.22999999999999,
      106.09500000000003,
      133.83749999999998,
      93.51750000000001,
      141.1575
    );
    g.bezierVertex(
      89.34750000000003,
      143.5875,
      85.13250000000002,
      146.1975,
      82.20750000000002,
      150.03750000000002
    );
    g.bezierVertex(
      75.28500000000003,
      159.15,
      78.78000000000002,
      172.125,
      87.53250000000001,
      178.4925
    );
    g.endShape();

    // p5.js code for compound path (outer shape with hole(s)):
    g.beginShape();
    g.vertex(262.4625, 3.1275);
    g.bezierVertex(
      221.07,
      3.1275,
      187.46249999999998,
      36.735,
      187.46249999999998,
      78.1275
    );
    g.vertex(187.46249999999998, 190.6275);
    g.bezierVertex(
      187.46249999999998,
      219.60000000000002,
      210.99,
      243.1275,
      239.96249999999998,
      243.1275
    );
    g.vertex(284.9625, 243.1275);
    g.bezierVertex(
      313.935,
      243.1275,
      337.4625,
      219.60000000000002,
      337.4625,
      190.6275
    );
    g.vertex(337.4625, 78.1275);
    g.bezierVertex(
      337.4625,
      36.735,
      303.855,
      3.1275000000000013,
      262.4625,
      3.1275000000000013
    );
    g.beginContour();
    g.vertex(262.4325, 150.14999999999998);
    g.bezierVertex(
      250.00500000000002,
      150.14999999999998,
      239.9325,
      140.0775,
      239.9325,
      127.64999999999999
    );
    g.bezierVertex(
      239.9325,
      115.2225,
      250.00500000000002,
      105.14999999999999,
      262.4325,
      105.14999999999999
    );
    g.bezierVertex(
      274.86,
      105.14999999999999,
      284.9325,
      115.2225,
      284.9325,
      127.64999999999999
    );
    g.bezierVertex(
      284.9325,
      140.0775,
      274.86,
      150.14999999999998,
      262.4325,
      150.14999999999998
    );
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(704.9775, 142.92000000000002);
    g.bezierVertex(
      704.9775,
      130.665,
      695.2950000000001,
      120.73500000000001,
      683.3475,
      120.73500000000001
    );
    g.bezierVertex(
      671.4,
      120.73500000000001,
      662.8050000000001,
      129.4275,
      661.845,
      141.645
    );
    g.bezierVertex(
      661.0575000000001,
      151.59,
      658.2375000000001,
      165.07500000000002,
      650.9475,
      172.38750000000002
    );
    g.bezierVertex(643.6725, 179.685, 631.8825, 179.2425, 624.4575, 172.44);
    g.vertex(624.4275, 172.44);
    g.bezierVertex(
      616.755,
      164.81250000000003,
      615.3075000000001,
      151.455,
      623.5425,
      143.52
    );
    g.bezierVertex(
      627.0150000000001,
      140.175,
      631.5900000000001,
      138.24,
      636.0825000000001,
      136.485
    );
    g.bezierVertex(
      649.7775000000001,
      131.13000000000002,
      663.0225,
      123.21750000000002,
      674.8950000000001,
      114.21750000000002
    );
    g.bezierVertex(
      677.2200000000001,
      112.45500000000001,
      679.4850000000001,
      110.65500000000002,
      681.6975000000001,
      108.82500000000002
    );
    g.bezierVertex(
      693.7050000000002,
      98.88000000000002,
      703.9650000000001,
      86.20500000000001,
      704.8800000000001,
      70.02000000000001
    );
    g.bezierVertex(
      705.9900000000001,
      50.370000000000005,
      697.4325000000001,
      30.900000000000013,
      682.4475000000001,
      18.202500000000008
    );
    g.bezierVertex(
      671.0100000000001,
      8.512500000000008,
      656.3100000000002,
      3.135000000000008,
      641.325,
      3.135000000000008
    );
    g.vertex(614.9625000000001, 3.135000000000008);
    g.bezierVertex(
      581.8275000000001,
      3.135000000000008,
      554.9625000000001,
      30.00000000000001,
      554.9625000000001,
      63.135000000000005
    );
    g.vertex(554.9625000000001, 210.135);
    g.bezierVertex(
      554.9625000000001,
      228.36,
      569.7375000000002,
      243.135,
      587.9625000000001,
      243.135
    );
    g.vertex(629.4300000000001, 243.135);
    g.bezierVertex(
      639.3750000000001,
      243.135,
      648.9150000000001,
      239.1825,
      655.95,
      232.15500000000003
    );
    g.vertex(696.1800000000001, 191.925);
    g.bezierVertex(
      701.8050000000001,
      186.3,
      704.9700000000001,
      178.66500000000002,
      704.9700000000001,
      170.71500000000003
    );
    g.bezierVertex(
      704.9700000000001,
      170.71500000000003,
      704.9700000000001,
      142.92750000000004,
      704.9775000000001,
      142.92750000000004
    );
    g.vertex(704.9775000000001, 142.92750000000004);
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(448.5225, 119.3775);
    g.bezierVertex(
      464.11499999999995,
      119.98499999999999,
      473.2425,
      136.5525,
      465.43499999999995,
      149.49
    );
    g.vertex(455.3924999999999, 166.14);
    g.bezierVertex(
      447.495,
      179.22749999999996,
      445.5824999999999,
      195.0075,
      450.78749999999997,
      209.27999999999997
    );
    g.bezierVertex(
      451.94999999999993,
      212.47499999999997,
      453.43499999999995,
      215.56499999999997,
      455.28,
      218.4975
    );
    g.bezierVertex(
      465.80999999999995,
      235.23,
      485.805,
      245.07,
      506.1675,
      242.93249999999998
    );
    g.bezierVertex(
      513.6225000000001,
      242.15249999999997,
      520.9124999999999,
      239.8725,
      527.6175000000001,
      235.98
    );
    g.bezierVertex(
      554.415,
      220.395,
      557.6324999999999,
      184.05749999999998,
      543.0374999999999,
      153.855
    );
    g.bezierVertex(
      540.8025,
      149.23499999999999,
      485.9175,
      33.39749999999998,
      484.2824999999999,
      29.955
    );
    g.bezierVertex(
      477.0899999999999,
      14.812499999999996,
      463.55999999999995,
      3.4574999999999996,
      446.50499999999994,
      3.4574999999999996
    );
    g.bezierVertex(
      429.44999999999993,
      3.4574999999999996,
      415.92749999999995,
      14.819999999999999,
      408.72749999999996,
      29.955
    );
    g.bezierVertex(
      407.0925,
      33.3975,
      352.19999999999993,
      149.23499999999999,
      349.9724999999999,
      153.855
    );
    g.bezierVertex(
      335.37749999999994,
      184.0575,
      338.5949999999999,
      220.395,
      365.3924999999999,
      235.98
    );
    g.bezierVertex(
      372.0899999999999,
      239.8725,
      379.38749999999993,
      242.1525,
      386.84249999999986,
      242.93249999999998
    );
    g.bezierVertex(
      407.20499999999987,
      245.07,
      427.2074999999999,
      235.2225,
      437.7299999999999,
      218.4975
    );
    g.bezierVertex(
      439.57499999999993,
      215.56499999999997,
      441.0524999999999,
      212.47500000000002,
      442.2224999999999,
      209.27999999999997
    );
    g.bezierVertex(
      447.42749999999995,
      195.0075,
      445.5149999999999,
      179.23499999999996,
      437.61749999999995,
      166.13999999999996
    );
    g.vertex(427.57499999999993, 149.48999999999998);
    g.bezierVertex(
      419.775,
      136.55999999999997,
      428.8949999999999,
      119.98499999999997,
      444.4874999999999,
      119.37749999999997
    );
    g.vertex(448.5224999999999, 119.37749999999997);
    g.endShape();
  },
  Style9: (g) => {
    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(182.625, 143.1975);
    g.bezierVertex(
      182.625,
      124.89750000000001,
      167.79,
      110.0625,
      149.49,
      110.0625
    );
    g.bezierVertex(
      140.78249999999997,
      110.0625,
      132.86249999999998,
      113.42249999999999,
      126.945,
      118.91250000000001
    );
    g.vertex(121.09499999999998, 123.73500000000001);
    g.bezierVertex(
      108.44249999999998,
      135.82500000000002,
      108.82499999999997,
      154.57500000000002,
      126.65249999999997,
      172.395
    );
    g.bezierVertex(
      101.12249999999999,
      146.865,
      86.45249999999999,
      159.5625,
      68.55749999999999,
      177.4575
    );
    g.bezierVertex(
      87.65999999999998,
      158.35500000000002,
      98.03999999999998,
      143.775,
      73.61999999999999,
      119.36250000000003
    );
    g.bezierVertex(
      94.19999999999999,
      139.94250000000002,
      104.50499999999998,
      133.6125,
      118.83749999999999,
      125.35500000000003
    );
    g.bezierVertex(
      138.465,
      111.78000000000003,
      152.625,
      89.70750000000004,
      152.625,
      66.38250000000004
    );
    g.bezierVertex(
      152.625,
      31.237500000000036,
      124.1325,
      2.74500000000004,
      88.98750000000001,
      2.74500000000004
    );
    g.vertex(62.625, 2.74500000000004);
    g.bezierVertex(
      29.490000000000002,
      2.7375,
      2.625,
      29.6025,
      2.625,
      62.737500000000004
    );
    g.vertex(2.625, 190.2375);
    g.bezierVertex(
      2.625,
      219.23250000000002,
      26.130000000000003,
      242.73749999999998,
      55.125,
      242.73749999999998
    );
    g.vertex(130.125, 242.73749999999998);
    g.bezierVertex(
      159.12,
      242.73749999999998,
      182.625,
      219.23250000000002,
      182.625,
      190.23749999999998
    );
    g.vertex(182.625, 143.1975);
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(551.0175, 188.52);
    g.bezierVertex(
      550.755,
      175.38,
      546.8175,
      162.5625,
      541.7925,
      150.41250000000002
    );
    g.bezierVertex(
      534.6375,
      133.13250000000002,
      495.1050000000001,
      52.717500000000015,
      484.2075000000001,
      29.12250000000001
    );
    g.bezierVertex(
      477.18000000000006,
      13.90500000000001,
      463.4850000000001,
      2.6250000000000107,
      446.43000000000006,
      2.6250000000000107
    );
    g.bezierVertex(
      429.3750000000001,
      2.6250000000000107,
      415.6875000000001,
      13.90500000000001,
      408.6525000000001,
      29.12250000000001
    );
    g.bezierVertex(
      397.7550000000001,
      52.717500000000015,
      358.2150000000001,
      133.13250000000002,
      351.0675000000001,
      150.41250000000002
    );
    g.bezierVertex(
      346.04250000000013,
      162.5625,
      342.10500000000013,
      175.3725,
      341.8425000000001,
      188.52
    );
    g.bezierVertex(
      341.4825000000001,
      206.65500000000003,
      349.4025000000001,
      226.05,
      365.5050000000001,
      235.47750000000002
    );
    g.bezierVertex(
      392.1300000000001,
      251.0625,
      428.56500000000017,
      240.735,
      446.43000000000006,
      212.4225
    );
    g.bezierVertex(
      464.29500000000013,
      240.7425,
      500.7300000000001,
      251.0625,
      527.355,
      235.47750000000002
    );
    g.bezierVertex(
      543.4575000000001,
      226.05,
      551.385,
      206.65500000000003,
      551.0175,
      188.52
    );
    g.beginContour();
    g.vertex(446.43, 182.7375);
    g.bezierVertex(
      446.43,
      147.33749999999998,
      429.0075,
      145.2375,
      407.49750000000006,
      145.2375
    );
    g.bezierVertex(429.0075, 145.2375, 446.43, 135.7575, 446.43, 98.2575);
    g.bezierVertex(
      446.43,
      135.7575,
      463.8525,
      145.23749999999998,
      485.36249999999995,
      145.23749999999998
    );
    g.bezierVertex(
      463.8525,
      145.23749999999998,
      446.43,
      152.5425,
      446.43,
      182.73749999999998
    );
    g.endContour();
    g.endShape();

    // p5.js code for compound path:
    g.beginShape();
    g.vertex(262.1925, 2.7375);
    g.vertex(262.1925, 2.7375);
    g.bezierVertex(
      220.76999999999998,
      2.7375,
      187.1925,
      36.315,
      187.1925,
      77.73750000000001
    );
    g.vertex(187.1925, 190.2375);
    g.bezierVertex(
      187.1925,
      219.23250000000002,
      210.69749999999996,
      242.73749999999998,
      239.6925,
      242.73749999999998
    );
    g.vertex(284.6925, 242.73749999999998);
    g.bezierVertex(
      313.6875,
      242.73749999999998,
      337.1925,
      219.23250000000002,
      337.1925,
      190.23749999999998
    );
    g.vertex(337.1925, 77.73750000000001);
    g.bezierVertex(
      337.1925,
      36.315000000000005,
      303.615,
      2.7375000000000043,
      262.1925,
      2.7375000000000043
    );
    g.beginContour();
    g.vertex(262.1925, 169.53750000000002);
    g.bezierVertex(262.1925, 143.985, 258.045, 126.9975, 224.6925, 126.9975);
    g.bezierVertex(
      258.04499999999996,
      126.9975,
      262.1925,
      102.48000000000002,
      262.1925,
      81.76500000000001
    );
    g.bezierVertex(
      262.1925,
      115.01250000000002,
      278.97749999999996,
      126.9975,
      299.6925,
      126.9975
    );
    g.bezierVertex(
      265.5075,
      126.9975,
      262.1925,
      142.365,
      262.1925,
      169.53750000000002
    );
    g.endContour();
    g.endShape();

    // p5.js code for single subpath:
    g.beginShape();
    g.vertex(677.16, 123.48750000000001);
    g.bezierVertex(
      657.7275,
      123.38250000000002,
      643.4175,
      140.48250000000002,
      643.4175,
      160.2375
    );
    g.bezierVertex(
      643.4175,
      139.5225,
      635.7075,
      122.73750000000001,
      605.9175,
      122.73750000000001
    );
    g.bezierVertex(
      635.7075,
      122.73750000000001,
      643.4175,
      105.95250000000001,
      643.4175,
      85.23750000000001
    );
    g.bezierVertex(
      643.4175,
      104.22749999999999,
      656.3924999999999,
      126.3075,
      678.045,
      122.8575
    );
    g.bezierVertex(
      697.9649999999999,
      119.685,
      708.48,
      106.25250000000001,
      705.3525,
      69.6225
    );
    g.bezierVertex(
      703.68,
      50.010000000000005,
      697.905,
      30.5025,
      682.92,
      17.804999999999996
    );
    g.bezierVertex(
      671.4825,
      8.114999999999997,
      656.7824999999999,
      2.7374999999999963,
      641.7974999999999,
      2.7374999999999963
    );
    g.vertex(615.435, 2.7374999999999963);
    g.bezierVertex(
      582.3,
      2.7374999999999963,
      555.435,
      29.6025,
      555.435,
      62.7375
    );
    g.vertex(555.435, 209.73749999999998);
    g.bezierVertex(
      555.435,
      227.96249999999998,
      570.21,
      242.73749999999998,
      588.435,
      242.73749999999998
    );
    g.vertex(629.9024999999999, 242.73749999999998);
    g.bezierVertex(
      639.8474999999999,
      242.73749999999998,
      649.3874999999999,
      238.785,
      656.4224999999999,
      231.7575
    );
    g.vertex(696.6524999999999, 191.5275);
    g.bezierVertex(
      702.2774999999999,
      185.9025,
      705.4424999999999,
      178.26749999999998,
      705.4424999999999,
      170.3175
    );
    g.vertex(705.4424999999999, 152.745);
    g.bezierVertex(
      705.4424999999999,
      137.055,
      692.5649999999999,
      123.57749999999999,
      677.1599999999999,
      123.495
    );
    g.endShape();
  },
};

let styleButtons = [];
// We'll track which icon is selected
let selectedIndex = 0;

let textDiv;

let mainContainer;

function setup() {
  // Set the entire document body background color to match
  document.body.style.backgroundColor = "rgb(242, 211, 211)";
  document.body.style.margin = "0";
  document.body.style.padding = "0";
  document.body.style.overflow = "auto";

  // Create a container div for the canvas
  mainContainer = createDiv();
  mainContainer.id("mainContainer");
  mainContainer.style("width", "1080px");
  mainContainer.style("height", "1080px");
  mainContainer.style("position", "relative");
  mainContainer.style("margin", "0 auto"); // Center the container
  mainContainer.style("background-color", "rgb(242, 211, 211)"); // Match your background color

  // Create the canvas with the same dimensions and append it to the container
  let canvas = createCanvas(1080, 1080);
  canvas.parent(mainContainer);

  // Update global canvas size constant if you're using one
  CANVAS_SIZE = 1080;

  // Create and add text div to mainContainer
  textDiv = createDiv(MESSAGE);
  textDiv.parent(mainContainer);
  updateTextDiv();

  noStroke();
  updateScaling();

  let css = `
    .myButton, .myIconButton {
      font-family: monospace;
      color: rgb(140, 98, 57);
      background: none;
      border: none;
      cursor: pointer;
      transition: opacity 0.2s;
      outline: none;
    }
    
    .myIconButton {
      border: 2px solid rgb(140, 98, 57);
      border-radius: 0;
    }
    
    .myButton:active, .myIconButton:active {
      opacity: 0.7;
    }

    .selectedIcon {
      color: rgb(242, 211, 211);
      background-color: rgb(140, 98, 57);
      border-radius: 0;
    }
    
    .selectedIcon svg path,
    .selectedIcon svg line,
    .selectedIcon svg rect {
      stroke: rgb(242, 211, 211) !important;
    }
  `;
  createElement("style", css);

  // Off-screen graphics
  pg = createGraphics(width, height);

  // Default text font is the regular font
  textFont(regularFont);

  fullColor = color(140, 98, 57);
  lighterColor = lerpColor(fullColor, color(255), 0.5);

  // Create Bake button
  bakeButton = createButton("Bake");
  bakeButton.parent(mainContainer); // Add to mainContainer
  bakeButton.mousePressed(() => {
    isBaking = true;
    bakeStartFrame = frameCount;
    currentMaxRadius = INITIAL_SEARCH_RADIUS; // Start with small search radius

    // Clear and prepare the pixel buffer
    pg.clear();
    pg.background(0);

    // Draw the LOAF to the buffer
    drawLOAF(pg);
    pg.loadPixels();

    // Build the mask and candidates
    buildInsideMask();
    buildInsideCandidates();
  });
  styleButton(bakeButton);

  // Create Stop button
  stopButton = createButton("Stop");
  stopButton.parent(mainContainer); // Add to mainContainer
  stopButton.mousePressed(() => {
    isBaking = false;
  });
  styleButton(stopButton);
  positionButtons();

  createStyleButtons();
  positionStyleButtons();

  frameRate(60);
}

function drawPrintMarks() {
  stroke(color(140, 98, 57));
  strokeWeight(2); // Thicker lines
  noFill();

  const markSize = 15; // Large marks
  const shiftDown = 343;

  // Top-left LOAF corner
  line(
    width * 0.07,
    height * 0.15 + shiftDown,
    width * 0.07 - markSize,
    height * 0.15 + shiftDown
  );
  line(
    width * 0.07,
    height * 0.15 + shiftDown,
    width * 0.07,
    height * 0.15 - markSize + shiftDown
  );

  // Top-right LOAF corner
  line(
    width * 0.93,
    height * 0.15 + shiftDown,
    width * 0.93 + markSize,
    height * 0.15 + shiftDown
  );
  line(
    width * 0.93,
    height * 0.15 + shiftDown,
    width * 0.93,
    height * 0.15 - markSize + shiftDown
  );

  // Bottom-left LOAF corner
  line(
    width * 0.07,
    height * 0.44 + shiftDown,
    width * 0.07 - markSize,
    height * 0.44 + shiftDown
  );
  line(
    width * 0.07,
    height * 0.44 + shiftDown,
    width * 0.07,
    height * 0.44 + markSize + shiftDown
  );

  // Bottom-right LOAF corner
  line(
    width * 0.93,
    height * 0.44 + shiftDown,
    width * 0.93 + markSize,
    height * 0.44 + shiftDown
  );
  line(
    width * 0.93,
    height * 0.44 + shiftDown,
    width * 0.93,
    height * 0.44 + markSize + shiftDown
  );
}

function draw() {
  background(242, 211, 211);

  drawPrintMarks();

  // Draw the LOAF outlines and dots first.
  stroke(fullColor);
  strokeWeight(3);
  noFill();
  drawLOAF(this);

  if (isBaking) {
    // Update the current max radius based on elapsed frames
    let framesSinceBake = frameCount - bakeStartFrame;
    let duration = 400; // Longer duration for more gradual transition

    // Increase radius from initial to max using the eased progress
    currentMaxRadius = map(
      framesSinceBake,
      0,
      duration,
      INITIAL_SEARCH_RADIUS,
      MAX_SEARCH_RADIUS
    );

    updateBaking();
  }

  // Draw accumulated dots.
  noStroke();
  for (let p of points) {
    fill(p.col);
    circle(p.x, p.y, CIRCLE_DIAMETER);
  }

  fill(fullColor);
  textFont(regularFont);
  textAlign(CENTER, TOP);
  textSize(12);
  let textBoxWidth = width;
  let textBoxX = (width - textBoxWidth) / 2;
  let textBoxY = 20;
  let textBoxHeight = 250;

  textFont(mediumFont);
  textSize(18);
  let titleY = textBoxY + textBoxHeight;
  let titleHeight = 120;
  text(TITLE, textBoxX, titleY, textBoxWidth, titleHeight);
}

function drawLOAF(g) {
  g.push();
  g.translate(offsetX, offsetY);
  g.scale(scaleFactor);

  if (g === pg) {
    g.background(0);
    g.fill(255);
    g.noStroke();
  } else {
    g.noFill();
    g.stroke(fullColor);
    g.strokeWeight(4);
  }

  loafStyles[currentLoafStyle](g);

  g.pop();
}

function buildInsideMask() {
  pg.loadPixels();
  insideMask = new Uint8Array(width * height); // Use Uint8Array instead of Array for better performance

  for (let i = 0; i < pg.pixels.length; i += 4) {
    let r = pg.pixels[i];
    // If pixel is white/inside (r > threshold), mark as 1
    insideMask[i / 4] = r > 10 ? 1 : 0;
  }
}

function buildInsideCandidates() {
  insideCandidates = [];

  // Get total number of inside pixels
  let insideCount = 0;
  for (let i = 0; i < insideMask.length; i++) {
    if (insideMask[i]) insideCount++;
  }

  // Calculate how many samples to take (around 2-5% of inside pixels)
  // This gives good coverage while maintaining performance
  const sampleCount = Math.min(insideCount, 20000);

  // Use random sampling approach
  for (let i = 0; i < sampleCount; i++) {
    // Pick random coordinates
    let x, y, index;

    // Keep trying until we find a point inside the shape
    do {
      x = Math.floor(random(width));
      y = Math.floor(random(height));
      index = y * width + x;
    } while (!insideMask[index]);

    insideCandidates.push({ x, y });
  }
}

function computeApproxDistance(x, y) {
  // If we're outside or in a hole, return 0
  if (!insideMask[y * width + x]) return 0;

  // Use a more comprehensive direction sampling
  // Check 16 directions instead of 8 for better coverage
  const numDirections = 16;
  const maxSearchRadius = min(currentMaxRadius, 50);

  // Generate directions evenly spread around a circle
  let minDist = maxSearchRadius;

  for (let dirIndex = 0; dirIndex < numDirections; dirIndex++) {
    let angle = (dirIndex * TWO_PI) / numDirections;
    let dirX = cos(angle);
    let dirY = sin(angle);

    // Search along this ray
    for (let r = 1; r <= maxSearchRadius; r++) {
      let nx = floor(x + r * dirX);
      let ny = floor(y + r * dirY);

      // Check bounds
      if (nx < 0 || nx >= width || ny < 0 || ny >= height) break;

      // If we hit edge or hole
      if (!insideMask[ny * width + nx]) {
        minDist = min(minDist, r);
        break;
      }
    }
  }

  return minDist;
}

// 4. More efficient baking process
function updateBaking() {
  if (!isBaking) return;

  // Generate multiple dots per frame
  const dotsPerFrame = 5000; // Increase this for faster generation

  for (let i = 0; i < dotsPerFrame; i++) {
    if (insideCandidates.length === 0) {
      buildInsideCandidates();
    }

    // Get a random candidate
    let randomIndex = floor(random(insideCandidates.length));
    let candidate = insideCandidates[randomIndex];

    // Remove from candidates (swap with last element and pop for O(1) removal)
    insideCandidates[randomIndex] =
      insideCandidates[insideCandidates.length - 1];
    insideCandidates.pop();

    let dist = computeApproxDistance(candidate.x, candidate.y);
    if (dist < currentMaxRadius) {
      points.push({
        x: candidate.x,
        y: candidate.y,
        col: fullColor,
      });
    } else if (random() < 0.1) {
      points.push({
        x: candidate.x,
        y: candidate.y,
        col: lighterColor,
      });
    }
  }
}

function updateScaling() {
  // Use a fixed scale factor instead of responsive scaling
  scaleFactor = 1.3; // Or whatever fixed scale you need

  // Calculate offset to align L with left print mark (0.07 * width)
  // and F with right print mark (0.93 * width)
  // We need to adjust the BASE_SHAPE_CENTER_X to reflect the center of the LOAF
  // with the L and F aligned to the marks

  // Position offset so the L aligns with left mark and F with ight mark
  offsetX = width * 0.07;

  // For Y position, keep it centered vertically plus the 200px adjustment
  offsetY = height / 2 - BASE_SHAPE_CENTER_Y * scaleFactor + 200;
}

function styleButton(btn) {
  btn.class("myButton");

  // Get the button text
  let btnText = btn.html();

  // Clear the button content and create a precise wrapper
  btn.html("");
  let textSpan = createSpan(btnText);
  textSpan.parent(btn);
  textSpan.style("border-bottom", "1px solid rgb(140, 98, 57)");
  image.png;
  textSpan.style("line-height", "1.4");
  textSpan.style("display", "inline-block");

  // Style the button container
  btn.style("font-family", "ABCMonumentGroteskMono-Medium-Trial");
  btn.style("font-size", "18px");
  btn.style("color", "rgb(140, 98, 57)");
  btn.style("background", "none");
  btn.style("border", "none");
  btn.style("cursor", "pointer");
  btn.style("padding", "0");
  btn.style("margin", "0 8px");
}

function positionButtons() {
  // Position buttons to align with print marks
  const leftMarkX = width * 0.07;
  const rightMarkX = width * 0.93;
  const buttonY = height - 60; // Adjust this value as needed

  // Position Bake button with the 'B' at the left mark
  bakeButton.position(leftMarkX, buttonY);

  // Position Stop button with the right edge at the right mark
  let stopWidth = stopButton.width;
  stopButton.position(rightMarkX - stopWidth, buttonY);
}

function positionStyleButtons() {
  // Position the style buttons at the bottom center of the container
  const iconSize = 40; // Fixed size: 40px
  const gap = 40; // Gap between icons
  const totalWidth = (iconSize + gap) * styleButtons.length - gap;
  const startX = (width - totalWidth) / 2;
  const y = height - 160;

  for (let i = 0; i < styleButtons.length; i++) {
    let btn = styleButtons[i];
    btn.position(startX + i * (iconSize + gap), y);
  }
}

function updateTextDiv() {
  // Set text div properties for proper positioning within mainContainer
  textDiv.style("position", "absolute");
  textDiv.style("width", "100%"); // Full width of container
  textDiv.style("max-width", "none"); // Remove max-width constraint
  textDiv.style("top", "20px");
  textDiv.style("left", "0"); // Align to left edge
  textDiv.style("padding", "12px 55px"); // Add padding on sides for readability
  textDiv.style("box-sizing", "border-box"); // Include padding in width calculation
  textDiv.style("text-align", "justify"); // Justify text for a clean edge-to-edge look
  textDiv.style("text-align-last", "justify");
  textDiv.style("text-justify", "inter-word");
  textDiv.style("font-family", "monospace");
  textDiv.style("color", "rgb(140, 98, 57)");
  textDiv.style("font-size", "12px");
  textDiv.style("line-height", "1.1");
  textDiv.style("pointer-events", "none"); // Don't block mouse events
}

function drawJustifiedText(str, x, y, width, lineHeight) {
  const words = str.split(/\s+/);
  let currentLine = [];
  let currentY = y;

  for (let i = 0; i < words.length; i++) {
    currentLine.push(words[i]);

    // Check if adding the next word would exceed width
    if (i < words.length - 1) {
      const testLine = [...currentLine, words[i + 1]];
      const testWidth = textWidth(testLine.join(" "));

      if (testWidth > width) {
        // Justify and draw the current line
        drawJustifiedLine(currentLine, x, currentY, width);
        currentLine = [];
        currentY += lineHeight;
      }
    }
  }

  // Draw the last line (either left-aligned or justified)
  if (currentLine.length > 0) {
    // For last line, you can choose to justify or left-align
    // For full justification, use:
    drawJustifiedLine(currentLine, x, currentY, width);
    // For left-aligned last line (more common in typography), use:
    // text(currentLine.join(' '), x, currentY);
  }
}

function drawJustifiedLine(words, x, y, width) {
  if (words.length <= 1) {
    text(words[0], x, y);
    return;
  }

  const textContent = words.join(" ");
  const naturalWidth = textWidth(textContent);
  const extraSpace = width - naturalWidth;
  const spacesToDistribute = words.length - 1;
  const extraSpacePerGap = extraSpace / spacesToDistribute;

  let currentX = x;
  for (let i = 0; i < words.length; i++) {
    text(words[i], currentX, y);
    if (i < words.length - 1) {
      currentX += textWidth(words[i]) + textWidth(" ") + extraSpacePerGap;
    }
  }
}

function windowResized() {
  // Store old transformation values before they're updated
  const oldScaleFactor = scaleFactor;
  const oldOffsetX = offsetX;
  const oldOffsetY = offsetY;

  // Update scaling and other layout variables
  updateScaling();

  // Transform all existing points to the new coordinate system
  for (let point of points) {
    // Reverse the old transform, then apply the new transform

    // 1. Convert from screen space to LOAF space using old transform
    let loafX = (point.x - oldOffsetX) / oldScaleFactor;
    let loafY = (point.y - oldOffsetY) / oldScaleFactor;

    // 2. Convert back to screen space using new transform
    point.x = loafX * scaleFactor + offsetX;
    point.y = loafY * scaleFactor + offsetY;
  }

  // Don't clear existing points
  // Don't stop the baking process

  // Recreate the pg buffer with new dimensions
  pg = createGraphics(width, height);
  pg.background(0);
  drawLOAF(pg);

  // Reset masks for the new size
  if (insideMask) {
    buildInsideMask();
    buildInsideCandidates();
  }

  // Update display elements
  updateTextDiv();

  // Reposition UI elements
  positionButtons();
  positionStyleButtons();
}

function createStyleButtons() {
  // First add the CSS for icon buttons
  let iconCss = `
    .icon-button {
      width: 40px;
      height: 40px;
      border: 2px solid rgb(140, 98, 57);
      border-radius: 0;
      background: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      margin: 0;
    }
    
    .icon-button.selected {
      background-color: rgb(140, 98, 57);
    }
    
    .icon-button.selected svg path,
    .icon-button.selected svg line,
    .icon-button.selected svg rect {
      stroke: rgb(242, 211, 211) !important;
    }
  `;
  createElement("style", iconCss);

  // Load and inline each SVG
  styleButtons = [];

  for (let i = 0; i < 9; i++) {
    // Create a container div for each icon button
    let btn = createDiv();
    btn.class("icon-button");
    btn.parent(mainContainer);

    // Load the SVG content
    loadStrings(`/loaf/assets/icons/Icon_${i + 1}.svg`, (svgContent) => {
      // Join the lines and insert into the div
      btn.html(svgContent.join(""));

      // Make sure the SVG fills the container
      let svg = btn.elt.querySelector("svg");
      if (svg) {
        svg.setAttribute("width", "30");
        svg.setAttribute("height", "30");
      }
    });

    // On click: select this icon, deselect old icon
    btn.mousePressed(() => {
      // Deselect previous
      if (selectedIndex >= 0) {
        styleButtons[selectedIndex].removeClass("selected");
      }

      // Select the newly clicked icon
      btn.addClass("selected");
      selectedIndex = i;

      // Switch style
      currentLoafStyle = styleKeys[i];
      // clear the drawn dots
      points = [];

      // Reset baking variables
      framesSinceBake = 0;
      bakeStartFrame = frameCount;
      currentMaxRadius = INITIAL_SEARCH_RADIUS;

      // Clear the previous graphics buffer
      pg.clear();
      pg.background(0);
      drawLOAF(pg);

      // Reset inside masks if they're generated
      if (insideMask) {
        buildInsideMask();
        buildInsideCandidates();
      }
    });

    styleButtons.push(btn);
  }

  // Position the buttons
  positionStyleButtons();
}
